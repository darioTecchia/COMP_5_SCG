
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dist;

import java_cup.runtime.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.util.LinkedList;
import syntax.*;
import syntax.expr.*;
import syntax.typedenoter.*;
import syntax.statement.*;
import syntax.expr.unaryexpr.*;
import syntax.expr.binaryexpr.arithop.*;
import syntax.expr.binaryexpr.relop.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\013\000\002\005\012\000\002\006\007\000" +
    "\002\006\005\000\002\007\010\000\002\007\006\000\002" +
    "\010\004\000\002\010\002\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\011\007\000\002\011\006\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\007\000\002\014" +
    "\007\000\002\014\011\000\002\014\013\000\002\014\007" +
    "\000\002\014\005\000\002\014\010\000\002\014\006\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\006\000\002" +
    "\017\003\000\002\017\006\000\002\017\006\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\004\ufffe\016\006\001\002\000\004\002" +
    "\250\001\002\000\004\004\135\001\002\000\004\024\007" +
    "\001\002\000\004\042\130\001\002\000\006\006\012\041" +
    "\011\001\002\000\004\024\013\001\002\000\004\004\uffff" +
    "\001\002\000\004\042\014\001\002\000\020\025\024\026" +
    "\023\027\020\030\022\031\015\032\017\034\016\001\002" +
    "\000\124\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\001\002\000\020\025\024\026" +
    "\023\027\020\030\022\031\015\032\017\034\016\001\002" +
    "\000\022\025\024\026\023\027\020\030\022\031\015\032" +
    "\017\033\116\034\016\001\002\000\124\003\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\001\002\000\010\006\ufff4\041\ufff4\054\026\001\002\000" +
    "\124\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\001\002\000\124\003\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\001\002\000\124\003\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000\006\006" +
    "\ufff7\041\ufff7\001\002\000\032\003\042\022\043\023\031" +
    "\024\041\025\034\034\040\057\030\063\032\064\027\065" +
    "\035\066\036\067\037\001\002\000\056\006\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\020\uffd1\033\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\001\002\000\032\003\042\022\043\023\031\024\041" +
    "\025\034\034\040\057\030\063\032\064\027\065\035\066" +
    "\036\067\037\001\002\000\032\003\042\022\043\023\031" +
    "\024\041\025\034\034\040\057\030\063\032\064\027\065" +
    "\035\066\036\067\037\001\002\000\056\006\uffd2\010\uffd2" +
    "\011\uffd2\013\uffd2\020\uffd2\033\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\001\002\000\040\006\ufff5\036\047\041\ufff5\043\046" +
    "\044\061\045\060\046\053\047\052\050\057\051\055\052" +
    "\050\056\051\057\045\060\056\061\054\001\002\000\056" +
    "\006\uffd5\010\uffd5\011\uffd5\013\uffd5\020\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\001\002\000\056\006\uffd0\010\uffd0" +
    "\011\uffd0\013\uffd0\020\uffd0\033\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\056\006\uffd4\010\uffd4\011\uffd4\013\uffd4" +
    "\020\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002\000" +
    "\056\006\uffd3\010\uffd3\011\uffd3\013\uffd3\020\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\001\002\000\004\035\107\001" +
    "\002\000\060\006\uffce\010\uffce\011\uffce\013\uffce\020\uffce" +
    "\032\100\033\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\056\uffce\057\uffce\060\uffce\061\uffce\001\002\000" +
    "\056\006\uffbb\010\uffbb\011\uffbb\013\uffbb\020\uffbb\033\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\001\002\000\032\003\042\022" +
    "\043\023\031\024\041\025\034\034\040\057\030\063\032" +
    "\064\027\065\035\066\036\067\037\001\002\000\056\006" +
    "\uffbd\010\uffbd\011\uffbd\013\uffbd\020\uffbd\033\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\001\002\000\032\003\042\022\043\023" +
    "\031\024\041\025\034\034\040\057\030\063\032\064\027" +
    "\065\035\066\036\067\037\001\002\000\032\003\042\022" +
    "\043\023\031\024\041\025\034\034\040\057\030\063\032" +
    "\064\027\065\035\066\036\067\037\001\002\000\032\003" +
    "\042\022\043\023\031\024\041\025\034\034\040\057\030" +
    "\063\032\064\027\065\035\066\036\067\037\001\002\000" +
    "\032\003\042\022\043\023\031\024\041\025\034\034\040" +
    "\057\030\063\032\064\027\065\035\066\036\067\037\001" +
    "\002\000\032\003\042\022\043\023\031\024\041\025\034" +
    "\034\040\057\030\063\032\064\027\065\035\066\036\067" +
    "\037\001\002\000\032\003\042\022\043\023\031\024\041" +
    "\025\034\034\040\057\030\063\032\064\027\065\035\066" +
    "\036\067\037\001\002\000\032\003\042\022\043\023\031" +
    "\024\041\025\034\034\040\057\030\063\032\064\027\065" +
    "\035\066\036\067\037\001\002\000\032\003\042\022\043" +
    "\023\031\024\041\025\034\034\040\057\030\063\032\064" +
    "\027\065\035\066\036\067\037\001\002\000\032\003\042" +
    "\022\043\023\031\024\041\025\034\034\040\057\030\063" +
    "\032\064\027\065\035\066\036\067\037\001\002\000\032" +
    "\003\042\022\043\023\031\024\041\025\034\034\040\057" +
    "\030\063\032\064\027\065\035\066\036\067\037\001\002" +
    "\000\032\003\042\022\043\023\031\024\041\025\034\034" +
    "\040\057\030\063\032\064\027\065\035\066\036\067\037" +
    "\001\002\000\032\003\042\022\043\023\031\024\041\025" +
    "\034\034\040\057\030\063\032\064\027\065\035\066\036" +
    "\067\037\001\002\000\032\003\042\022\043\023\031\024" +
    "\041\025\034\034\040\057\030\063\032\064\027\065\035" +
    "\066\036\067\037\001\002\000\056\006\uffc5\010\uffc5\011" +
    "\uffc5\013\uffc5\020\uffc5\033\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\043\046\044\uffc5\045\060\046\053\047\052\050" +
    "\057\051\055\052\050\056\uffc5\057\uffc5\060\056\061\054" +
    "\001\002\000\042\006\uffc2\010\uffc2\011\uffc2\013\uffc2\020" +
    "\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\044\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000" +
    "\042\006\uffbf\010\uffbf\011\uffbf\013\uffbf\020\uffbf\033\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000\056\006\uffc8" +
    "\010\uffc8\011\uffc8\013\uffc8\020\uffc8\033\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045\060\046\053" +
    "\047\052\050\057\051\055\052\050\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\001\002\000\042\006\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\020\uffc4\033\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\043\uffc4\044\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\001\002\000\056\006\uffc7\010\uffc7\011\uffc7\013\uffc7\020" +
    "\uffc7\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7" +
    "\044\uffc7\045\060\046\053\047\052\050\057\051\055\052" +
    "\050\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000\042" +
    "\006\uffc1\010\uffc1\011\uffc1\013\uffc1\020\uffc1\033\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\001\002\000\042\006\uffc0\010" +
    "\uffc0\011\uffc0\013\uffc0\020\uffc0\033\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\043\uffc0\044\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\001\002\000\056\006\uffca\010\uffca\011\uffca" +
    "\013\uffca\020\uffca\033\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\043\046\044\uffca\045\060\046\053\047\052\050\057" +
    "\051\055\052\050\056\uffca\057\uffca\060\056\061\054\001" +
    "\002\000\042\006\uffc3\010\uffc3\011\uffc3\013\uffc3\020\uffc3" +
    "\033\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000\036" +
    "\036\047\037\075\043\046\044\061\045\060\046\053\047" +
    "\052\050\057\051\055\052\050\056\051\057\045\060\056" +
    "\061\054\001\002\000\056\006\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\020\uffcd\033\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002" +
    "\000\056\006\uffc6\010\uffc6\011\uffc6\013\uffc6\020\uffc6\033" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6" +
    "\045\060\046\053\047\052\050\057\051\055\052\050\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000\056\006\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\020\uffc9\033\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\043\046\044\uffc9\045\060\046\053" +
    "\047\052\050\057\051\055\052\050\056\uffc9\057\uffc9\060" +
    "\056\061\054\001\002\000\034\003\042\022\043\023\031" +
    "\024\041\025\034\033\103\034\040\057\030\063\032\064" +
    "\027\065\035\066\036\067\037\001\002\000\042\020\uffd6" +
    "\033\uffd6\036\047\040\105\043\046\044\061\045\060\046" +
    "\053\047\052\050\057\051\055\052\050\056\051\057\045" +
    "\060\056\061\054\001\002\000\004\033\104\001\002\000" +
    "\056\006\uffcb\010\uffcb\011\uffcb\013\uffcb\020\uffcb\033\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\001\002\000\056\006\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\020\uffcc\033\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\001\002\000\032\003\042\022\043\023\031\024" +
    "\041\025\034\034\040\057\030\063\032\064\027\065\035" +
    "\066\036\067\037\001\002\000\006\020\uffd7\033\uffd7\001" +
    "\002\000\004\042\110\001\002\000\020\025\024\026\023" +
    "\027\020\030\022\031\015\032\017\034\016\001\002\000" +
    "\056\006\uffcf\010\uffcf\011\uffcf\013\uffcf\020\uffcf\033\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\001\002\000\056\006\uffbc\010" +
    "\uffbc\011\uffbc\013\uffbc\020\uffbc\033\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\001\002\000\056\006\uffbe\010\uffbe\011\uffbe\013" +
    "\uffbe\020\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002" +
    "\000\004\033\123\001\002\000\006\033\uffea\040\121\001" +
    "\002\000\004\053\117\001\002\000\020\025\024\026\023" +
    "\027\020\030\022\031\015\032\017\034\016\001\002\000" +
    "\124\003\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\001\002\000\020\025\024\026\023" +
    "\027\020\030\022\031\015\032\017\034\016\001\002\000" +
    "\004\033\uffeb\001\002\000\004\053\124\001\002\000\020" +
    "\025\024\026\023\027\020\030\022\031\015\032\017\034" +
    "\016\001\002\000\124\003\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\004" +
    "\035\127\001\002\000\124\003\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\001\002\000" +
    "\020\025\024\026\023\027\020\030\022\031\015\032\017" +
    "\034\016\001\002\000\010\006\ufff4\041\ufff4\054\026\001" +
    "\002\000\006\006\ufff6\041\ufff6\001\002\000\006\002\ufffc" +
    "\004\135\001\002\000\004\002\001\001\002\000\004\024" +
    "\136\001\002\000\004\032\137\001\002\000\006\024\140" +
    "\033\142\001\002\000\004\042\243\001\002\000\004\033" +
    "\236\001\002\000\004\042\143\001\002\000\020\025\024" +
    "\026\023\027\020\030\022\031\015\032\017\034\016\001" +
    "\002\000\046\003\156\007\153\012\146\014\161\015\147" +
    "\021\151\022\043\023\031\024\155\025\034\034\040\055" +
    "\152\057\030\063\032\064\027\065\035\066\036\067\037" +
    "\001\002\000\010\006\uffe8\011\uffe8\041\234\001\002\000" +
    "\032\003\042\022\043\023\031\024\041\025\034\034\040" +
    "\057\030\063\032\064\027\065\035\066\036\067\037\001" +
    "\002\000\004\024\007\001\002\000\004\006\222\001\002" +
    "\000\032\003\042\022\043\023\031\024\041\025\034\034" +
    "\040\057\030\063\032\064\027\065\035\066\036\067\037" +
    "\001\002\000\010\006\uffe7\011\uffe7\041\uffe7\001\002\000" +
    "\032\003\042\022\043\023\031\024\041\025\034\034\040" +
    "\057\030\063\032\064\027\065\035\066\036\067\037\001" +
    "\002\000\040\020\uffd6\036\205\040\105\043\046\044\061" +
    "\045\060\046\053\047\052\050\057\051\055\052\050\056" +
    "\051\057\045\060\056\061\054\001\002\000\046\017\uffd8" +
    "\020\uffce\032\175\036\uffce\040\174\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\054\176" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\001\002\000\046\006" +
    "\uffda\011\uffda\020\uffbb\036\uffbb\040\uffbb\041\uffda\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\001\002\000\004" +
    "\020\173\001\002\000\004\017\172\001\002\000\004\024" +
    "\162\001\002\000\004\054\163\001\002\000\032\003\042" +
    "\022\043\023\031\024\041\025\034\034\040\057\030\063" +
    "\032\064\027\065\035\066\036\067\037\001\002\000\036" +
    "\036\047\040\165\043\046\044\061\045\060\046\053\047" +
    "\052\050\057\051\055\052\050\056\051\057\045\060\056" +
    "\061\054\001\002\000\032\003\042\022\043\023\031\024" +
    "\041\025\034\034\040\057\030\063\032\064\027\065\035" +
    "\066\036\067\037\001\002\000\036\013\167\036\047\043" +
    "\046\044\061\045\060\046\053\047\052\050\057\051\055" +
    "\052\050\056\051\057\045\060\056\061\054\001\002\000" +
    "\046\003\156\007\153\012\146\014\161\015\147\021\151" +
    "\022\043\023\031\024\155\025\034\034\040\055\152\057" +
    "\030\063\032\064\027\065\035\066\036\067\037\001\002" +
    "\000\004\006\171\001\002\000\010\006\uffe3\011\uffe3\041" +
    "\uffe3\001\002\000\010\006\uffdd\011\uffdd\041\uffdd\001\002" +
    "\000\010\006\uffdc\011\uffdc\041\uffdc\001\002\000\004\024" +
    "\203\001\002\000\034\003\042\022\043\023\031\024\041" +
    "\025\034\033\201\034\040\057\030\063\032\064\027\065" +
    "\035\066\036\067\037\001\002\000\032\003\042\022\043" +
    "\023\031\024\041\025\034\034\040\057\030\063\032\064" +
    "\027\065\035\066\036\067\037\001\002\000\042\006\uffe1" +
    "\011\uffe1\036\047\041\uffe1\043\046\044\061\045\060\046" +
    "\053\047\052\050\057\051\055\052\050\056\051\057\045" +
    "\060\056\061\054\001\002\000\004\033\202\001\002\000" +
    "\046\006\uffde\011\uffde\020\uffcb\036\uffcb\040\uffcb\041\uffde" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002" +
    "\000\046\006\uffdf\011\uffdf\020\uffcc\036\uffcc\040\uffcc\041" +
    "\uffdf\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\001" +
    "\002\000\006\017\uffd8\040\174\001\002\000\004\017\uffd9" +
    "\001\002\000\032\003\042\022\043\023\031\024\041\025" +
    "\034\034\040\057\030\063\032\064\027\065\035\066\036" +
    "\067\037\001\002\000\036\036\047\037\207\043\046\044" +
    "\061\045\060\046\053\047\052\050\057\051\055\052\050" +
    "\056\051\057\045\060\056\061\054\001\002\000\042\020" +
    "\uffcd\036\uffcd\040\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\054\210\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\001\002\000\032\003\042\022\043" +
    "\023\031\024\041\025\034\034\040\057\030\063\032\064" +
    "\027\065\035\066\036\067\037\001\002\000\042\006\uffe0" +
    "\011\uffe0\036\047\041\uffe0\043\046\044\061\045\060\046" +
    "\053\047\052\050\057\051\055\052\050\056\051\057\045" +
    "\060\056\061\054\001\002\000\036\010\213\036\047\043" +
    "\046\044\061\045\060\046\053\047\052\050\057\051\055" +
    "\052\050\056\051\057\045\060\056\061\054\001\002\000" +
    "\046\003\156\007\153\012\146\014\161\015\147\021\151" +
    "\022\043\023\031\024\155\025\034\034\040\055\152\057" +
    "\030\063\032\064\027\065\035\066\036\067\037\001\002" +
    "\000\006\006\216\011\215\001\002\000\046\003\156\007" +
    "\153\012\146\014\161\015\147\021\151\022\043\023\031" +
    "\024\155\025\034\034\040\055\152\057\030\063\032\064" +
    "\027\065\035\066\036\067\037\001\002\000\010\006\uffe5" +
    "\011\uffe5\041\uffe5\001\002\000\004\006\220\001\002\000" +
    "\010\006\uffe4\011\uffe4\041\uffe4\001\002\000\042\006\uffdb" +
    "\011\uffdb\036\047\041\uffdb\043\046\044\061\045\060\046" +
    "\053\047\052\050\057\051\055\052\050\056\051\057\045" +
    "\060\056\061\054\001\002\000\006\002\ufffa\004\ufffa\001" +
    "\002\000\004\041\224\001\002\000\046\003\156\007\153" +
    "\012\146\014\161\015\147\021\151\022\043\023\031\024" +
    "\226\025\034\034\040\055\152\057\030\063\032\064\027" +
    "\065\035\066\036\067\037\001\002\000\004\006\227\001" +
    "\002\000\050\017\uffd8\020\uffce\032\175\036\uffce\040\174" +
    "\042\014\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\054\176\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\001\002\000\010\006\uffe2\011\uffe2\041\uffe2\001" +
    "\002\000\036\013\231\036\047\043\046\044\061\045\060" +
    "\046\053\047\052\050\057\051\055\052\050\056\051\057" +
    "\045\060\056\061\054\001\002\000\046\003\156\007\153" +
    "\012\146\014\161\015\147\021\151\022\043\023\031\024" +
    "\155\025\034\034\040\055\152\057\030\063\032\064\027" +
    "\065\035\066\036\067\037\001\002\000\004\006\233\001" +
    "\002\000\010\006\uffe6\011\uffe6\041\uffe6\001\002\000\046" +
    "\003\156\007\153\012\146\014\161\015\147\021\151\022" +
    "\043\023\031\024\155\025\034\034\040\055\152\057\030" +
    "\063\032\064\027\065\035\066\036\067\037\001\002\000" +
    "\006\006\uffe9\011\uffe9\001\002\000\004\042\237\001\002" +
    "\000\020\025\024\026\023\027\020\030\022\031\015\032" +
    "\017\034\016\001\002\000\046\003\156\007\153\012\146" +
    "\014\161\015\147\021\151\022\043\023\031\024\155\025" +
    "\034\034\040\055\152\057\030\063\032\064\027\065\035" +
    "\066\036\067\037\001\002\000\004\006\242\001\002\000" +
    "\006\002\ufffb\004\ufffb\001\002\000\020\025\024\026\023" +
    "\027\020\030\022\031\015\032\017\034\016\001\002\000" +
    "\006\033\ufff8\040\245\001\002\000\004\024\140\001\002" +
    "\000\004\033\ufff9\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\133\005\132\001\001\000\004\007\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\020" +
    "\001\001\000\002\001\001\000\004\011\125\001\001\000" +
    "\006\011\114\012\113\001\001\000\002\001\001\000\004" +
    "\010\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\032\001\001" +
    "\000\002\001\001\000\004\017\112\001\001\000\004\017" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\043\001\001\000\002\001\001\000\004\017" +
    "\076\001\001\000\004\017\075\001\001\000\004\017\073" +
    "\001\001\000\004\017\072\001\001\000\004\017\071\001" +
    "\001\000\004\017\070\001\001\000\004\017\067\001\001" +
    "\000\004\017\066\001\001\000\004\017\065\001\001\000" +
    "\004\017\064\001\001\000\004\017\063\001\001\000\004" +
    "\017\062\001\001\000\004\017\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\101\017\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\105\017\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\117\001\001\000" +
    "\002\001\001\000\006\011\114\012\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\130\001\001\000\004\010\131\001\001\000\002\001" +
    "\001\000\006\004\246\005\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\143\001\001\000\014\013\147\014\144\015" +
    "\157\016\156\017\153\001\001\000\002\001\001\000\004" +
    "\017\227\001\001\000\004\007\222\001\001\000\002\001" +
    "\001\000\004\017\220\001\001\000\002\001\001\000\004" +
    "\017\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\163\001\001\000" +
    "\002\001\001\000\004\017\165\001\001\000\002\001\001" +
    "\000\014\013\167\014\144\015\157\016\156\017\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\203\001\001\000\006\016" +
    "\177\017\100\001\001\000\004\017\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\213\014\144\015\157\016\156\017\153\001\001\000" +
    "\002\001\001\000\014\013\216\014\144\015\157\016\156" +
    "\017\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\224\014\144\015\157\016\156\017" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\231\014\144\015" +
    "\157\016\156\017\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\234\014\144\015\157\016\156\017" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\237\001\001\000\014\013\240\014\144\015\157\016" +
    "\156\017\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\243\001\001\000\002\001\001\000\004\006" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

public void report_error(String msg, Object info) {
  Symbol sym = (Symbol)info;
  System.out.println(msg + " on: " + symbl_name_from_id(sym.sym) + "\nLine: " + sym.left + ", Column: " + sym.left);
}

public void syntax_error(Symbol cur_token) {
  System.out.println("Syntax Error: On " + symbl_name_from_id(cur_token.sym) + "\nLine: " + cur_token.left + ", Column: " + cur_token.left);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Global Functions 
            {
              Program RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Global g = (Global)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Function> fs = (LinkedList<Function>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(fsleft, fsright, g, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Global ::= GLOBAL Var_decls END 
            {
              Global RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> vs = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Global(gleft, gright, vs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Global ::= 
            {
              Global RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Functions ::= Def_fun Functions 
            {
              LinkedList<Function> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Function df = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Function> fs = (LinkedList<Function>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                fs.addFirst(df); 
                RESULT = fs;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= Def_fun 
            {
              LinkedList<Function> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function df = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new LinkedList<Function>();
                RESULT.addFirst(df); 
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END 
            {
              Function RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<ParDecl> parDecls = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stms = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(fleft, fright, new Variable(fNameleft, fNameright, fName), parDecls, t, stms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END 
            {
              Function RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stms = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(fleft, fright, new Variable(fNameleft, fNameright, fName), t, stms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Par_decls ::= ID COLON TypeDenoter COMMA Par_decls 
            {
              LinkedList<ParDecl> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ParDecl> ps = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ps.addFirst(new ParDecl(idleft, idright, new Variable(idleft, idright, id), t));
                RESULT = ps;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Par_decls ::= ID COLON TypeDenoter 
            {
              LinkedList<ParDecl> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new LinkedList<ParDecl>();
                RESULT.addFirst(new ParDecl(idleft, idright, new Variable(idleft, idright, id), t));
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var_decls ::= Var_decls SEMI ID COLON TypeDenoter Var_init_value 
            {
              LinkedList<VarDecl> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<VarDecl> vs = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarInitValue varInit = (VarInitValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                vs.addLast(new VarDecl(idleft, idright, new Variable(idleft, idright, id), t, varInit));
                RESULT = vs;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var_decls ::= ID COLON TypeDenoter Var_init_value 
            {
              LinkedList<VarDecl> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarInitValue varInit = (VarInitValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new LinkedList<VarDecl>();
                RESULT.addLast(new VarDecl(idleft, idright, new Variable(idleft, idright, id), t, varInit));
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarInitValue(exprleft, exprright, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeDenoter ::= NIL 
            {
              TypeDenoter RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeDenoter(nilleft, nilright, "NIL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeDenoter ::= INT 
            {
              TypeDenoter RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String integer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeDenoter(integerleft, integerright, "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeDenoter ::= BOOL 
            {
              TypeDenoter RESULT =null;
		int booleanerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int booleanerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String booleaner = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeDenoter(booleanerleft, booleanerright, "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeDenoter ::= FLOAT 
            {
              TypeDenoter RESULT =null;
		int floaterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floaterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String floater = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeDenoter(floaterleft, floaterright, "FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeDenoter ::= STRING 
            {
              TypeDenoter RESULT =null;
		int stringerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeDenoter(stringerleft, stringerright, "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDenoter ::= BLPAR TypeDenoter BRPAR 
            {
              TypeDenoter RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayTypeDenoter(bleft, bright, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDenoter ::= LPAR Types RPAR ARROW TypeDenoter 
            {
              TypeDenoter RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<TypeDenoter> ts = (LinkedList<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeDenoter(lleft, lright, ts, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDenoter ::= LPAR RPAR ARROW TypeDenoter 
            {
              TypeDenoter RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionTypeDenoter(lleft, lright, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Types ::= TypeDenoter COMMA Types 
            {
              LinkedList<TypeDenoter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<TypeDenoter> ts = (LinkedList<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ts.addFirst(t); 
            RESULT = ts;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Types ::= TypeDenoter 
            {
              LinkedList<TypeDenoter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDenoter t = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = new LinkedList<TypeDenoter>();
            RESULT.addFirst(t); 
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statements ::= Stat SEMI Statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                ss.addFirst(s);
                RESULT = ss;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statements ::= Stat 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new LinkedList<Statement>();
                RESULT.addFirst(s);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= NOP 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NopStatement(nleft, nright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= WHILE Expr DO Statements END 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStatement(wleft, wright, expr, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= IF Expr THEN Statements END 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfThenStatement(ileft, iright, expr, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= IF Expr THEN Statements ELSE Statements END 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int thenssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Statement> thenss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elsessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> elsess = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfThenElseStatement(ileft, iright, expr, thenss, elsess); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int initExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int initExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr initExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr condExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForStatement(fleft, fright, new Variable(idleft, idright, id), initExpr, condExpr, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= LOCAL Var_decls SEMI Statements END 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<VarDecl> vs = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalStatement(lleft, lright, vs, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ID ASSIGN Expr 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatement(idleft, idright, new Id(idleft, idright, id), expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= Expr SLPAR Expr SRPAR ASSIGN Expr 
            {
              Statement RESULT =null;
		int arrayNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arrayNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr arrayName = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int arrayIndexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayIndexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arrayIndex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayElemAssignStatement(arrayNameleft, arrayNameright, arrayName, arrayIndex, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= ID LPAR Exprs RPAR 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStatement(idleft, idright, new Id(idleft, idright, id), exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ID LPAR RPAR 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionCallStatement(idleft, idright, new Id(idleft, idright, id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= Vars READ 
            {
              Statement RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Id> vs = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadStatement(vsleft, vsright, vs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= Exprs WRITE 
            {
              Statement RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteStatement(exprsleft, exprsright, exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= RETURN Expr 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReturnStatement(rleft, rright, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= error 
            {
              Statement RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Vars ::= ID COMMA Vars 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Id> vs = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
          vs.addFirst(new Id(idleft, idright, id));
          RESULT = vs;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Vars ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = new LinkedList<Id>();
          RESULT.addFirst(new Id(idleft, idright, id));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exprs ::= Expr COMMA Exprs 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            exprs.addFirst(expr);
            RESULT = exprs;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exprs ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = new LinkedList<Expr>();
            RESULT.addFirst(expr);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= NIL 
            {
              Expr RESULT =null;
		int nilConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nilConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nilConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NilConst(nilConstleft, nilConstright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean t = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConst(tleft, tright, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean f = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConst(fleft, fright, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intConst = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConst(intConstleft, intConstright, intConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;
		int floatConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float floatConst = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatConst(floatConstleft, floatConstright, floatConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(stringConstleft, stringConstright, stringConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= BLPAR BRPAR COLON TypeDenoter 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayConst(bleft, bright, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(idleft, idright, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr SLPAR Expr SRPAR 
            {
              Expr RESULT =null;
		int arrayIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arrayId = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arrayPointleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrayPointright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr arrayPoint = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayRead(arrayIdleft, arrayIdright, arrayId, arrayPoint); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= ID LPAR Exprs RPAR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> es = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(idleft, idright, new Id(idleft, idright, id), es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= ID LPAR RPAR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionCall(idleft, idright, new Id(idleft, idright, id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TimesOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanERelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThenRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThenERelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UminusExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= SHARP Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SharpExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= error 
            {
              Expr RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
