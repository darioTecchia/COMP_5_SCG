package dist;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

import java.util.LinkedList;
import java.util.List;

import syntax.*;
import syntax.expr.*;
import syntax.typedenoter.*;
import syntax.statement.*;
import syntax.expr.unaryexpr.*;
import syntax.expr.binaryexpr.arithop.*;
import syntax.expr.binaryexpr.relop.*;

class Parser;

parser code{:  

public void report_error(String message, Object info) {
  if (info instanceof ComplexSymbol) {
    ComplexSymbol cs = (ComplexSymbol)info;
    String msg = String.format("%s for input symbol %s (L:%s, C:%s)", message, cs.getName(), cs.getLeft().getLine(), cs.getRight().getColumn());
    System.err.println(msg);
  } else {
    System.err.println(message);
  }
}

protected void report_expected_token_ids() {
  List<Integer> ids = this.expected_token_ids();
  LinkedList<String> list = new LinkedList<>();
  ids.forEach(id -> list.add(this.symbl_name_from_id(id)));
  System.err.println("instead expected token classes are " + list);
}

:}

/* Terminals (tokens returned by the scanner). */
terminal String FUNCTION, MAIN, END, IF, THEN, ELSE, WHILE, DO, FOR, LOCAL, GLOBAL, READ, WRITE, RETURN, NOT, SHARP, ID;
terminal String NIL, INT, BOOL, FLOAT, STRING;
terminal String LPAR, RPAR, BLPAR, BRPAR, SLPAR, SRPAR, COMMA, SEMI, COLON;
terminal String AND, OR, LT, LE, EQ, NE, GT, GE, ARROW, ASSIGN, NOP;
terminal String PLUS, MINUS, TIMES, DIV;
terminal String UMINUS;

terminal int  INT_CONST;
terminal float   FLOAT_CONST;
terminal String   STRING_CONST;
terminal boolean  TRUE, FALSE;

/* Non Terminals */
non terminal Program Program;
non terminal Global Global;
non terminal LinkedList<Function> Functions;
non terminal Function Def_fun;
non terminal LinkedList<ParDecl> Par_decls;
non terminal LinkedList<VarDecl> Var_decls;
non terminal VarInitValue Var_init_value;
non terminal TypeDenoter TypeDenoter;
non terminal LinkedList<TypeDenoter> Types;
non terminal LinkedList<Statement> Statements;
non terminal Statement Stat;
non terminal LinkedList<Id> Vars;
non terminal LinkedList<Expr> Exprs;
non terminal Expr Expr;

/* Precendeces */
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
precedence nonassoc LT, LE, EQ, NE, GT, GE;
precedence left UMINUS, NOT, COMMA, SHARP;

/* The grammar */
Program ::= Global:g Functions:fs
            {: RESULT = new Program(fsxleft, fsxright, g, fs); :}
;

Global ::= GLOBAL:g Var_decls:vs END
          {: RESULT = new Global(gxleft, gxright, vs); :}
          | 
          /* empty */
;

Functions ::= Def_fun:df Functions:fs
              {: 
                fs.addFirst(df); 
                RESULT = fs;
              :}
              |
              Def_fun:df
              {: 
                RESULT = new LinkedList<Function>();
                RESULT.addFirst(df); 
              :}
;

Def_fun ::= FUNCTION:f ID:fName LPAR Par_decls:parDecls RPAR COLON TypeDenoter:t Statements:stms END
            {: RESULT = new Function(fxleft, fxright, new Variable(fNamexleft, fNamexright, fName), parDecls, t, stms); :}
            |
            FUNCTION:f ID:fName LPAR RPAR COLON TypeDenoter:t Statements:stms END
            {: RESULT = new Function(fxleft, fxright, new Variable(fNamexleft, fNamexright, fName), t, stms); :}
;

Par_decls ::= ID:id COLON TypeDenoter:t COMMA Par_decls:ps
              {:
                ps.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), t));
                RESULT = ps;
              :}
              |
              ID:id COLON TypeDenoter:t
              {: 
                RESULT = new LinkedList<ParDecl>();
                RESULT.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), t));
              :}
;

Var_decls ::= Var_decls:vs SEMI ID:id COLON TypeDenoter:t Var_init_value:varInit  
              {: 
                vs.addLast(new VarDecl(idxleft, idxright, new Variable(idxleft, idxright, id), t, varInit));
                RESULT = vs;
              :}
              |
              ID:id COLON TypeDenoter:t Var_init_value:varInit
              {: 
                RESULT = new LinkedList<VarDecl>();
                RESULT.addLast(new VarDecl(idxleft, idxright, new Variable(idxleft, idxright, id), t, varInit));
              :}
;

Var_init_value ::= ASSIGN Expr:expr
                  {: RESULT = new VarInitValue(exprxleft, exprxright, expr); :}
                  | 
                  /* empty */
;

TypeDenoter ::= NIL:nil
        {: RESULT = new PrimitiveTypeDenoter(nilxleft, nilxright, "NIL"); :}
        | 
        INT:integer
        {: RESULT = new PrimitiveTypeDenoter(integerxleft, integerxright, "INT"); :}
        | 
        BOOL:booleaner
        {: RESULT = new PrimitiveTypeDenoter(booleanerxleft, booleanerxright, "BOOL"); :}
        | 
        FLOAT:floater
        {: RESULT = new PrimitiveTypeDenoter(floaterxleft, floaterxright, "FLOAT"); :}
        | 
        STRING:stringer
        {: RESULT = new PrimitiveTypeDenoter(stringerxleft, stringerxright, "STRING"); :}
        |
        BLPAR:b TypeDenoter:t BRPAR
        {: RESULT = new ArrayTypeDenoter(bxleft, bxright, t); :}
        |
        LPAR:l Types:ts RPAR ARROW TypeDenoter:t
        {: RESULT = new FunctionTypeDenoter(lxleft, lxright, ts, t); :}
        |
        LPAR:l RPAR ARROW TypeDenoter:t
        {: RESULT = new FunctionTypeDenoter(lxleft, lxright, t); :}
;

Types ::= TypeDenoter:t COMMA Types:ts
          {: 
            ts.addFirst(t); 
            RESULT = ts;
          :}
          |
          TypeDenoter:t
          {: 
            RESULT = new LinkedList<TypeDenoter>();
            RESULT.addFirst(t); 
          :}
;

Statements ::= Stat:s SEMI Statements:ss
              {: 
                ss.addFirst(s);
                RESULT = ss;
              :}
              |
              Stat:s
              {:
                RESULT = new LinkedList<Statement>();
                RESULT.addFirst(s);
              :}
;

Stat ::= NOP:n
        {: RESULT = new NopStatement(nxleft, nxright); :}
        | 
        WHILE:w Expr:expr DO Statements:ss END
        {: RESULT = new WhileStatement(wxleft, wxright, expr, ss); :}
        | 
        IF:i Expr:expr THEN Statements:ss END
        {: RESULT = new IfThenStatement(ixleft, ixright, expr, ss); :}
        | IF:i Expr:expr THEN Statements:thenss ELSE Statements:elsess END
        {: RESULT = new IfThenElseStatement(ixleft, ixright, expr, thenss, elsess); :}
        | FOR:f ID:id ASSIGN Expr:initExpr COMMA Expr:condExpr DO Statements:ss END
        {: RESULT = new ForStatement(fxleft, fxright, new Variable(idxleft, idxright, id), initExpr, condExpr, ss); :}
        | LOCAL:l Var_decls:vs SEMI Statements:ss END
        {: RESULT = new LocalStatement(lxleft, lxright, vs, ss); :}
        | ID:id ASSIGN Expr:expr
        {: RESULT = new AssignStatement(idxleft, idxright, new Id(idxleft, idxright, id), expr); :}
        | Expr:arrayName SLPAR Expr:arrayIndex SRPAR ASSIGN Expr:expr
        {: RESULT = new ArrayElemAssignStatement(arrayNamexleft, arrayNamexright, arrayName, arrayIndex, expr); :}
        | ID:id LPAR Exprs:exprs RPAR
        {: RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id), exprs); :}
        | ID:id LPAR RPAR
        {: RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id)); :}
        | Vars:vs READ
        {: RESULT = new ReadStatement(vsxleft, vsxright, vs); :}
        | Exprs:exprs WRITE
        {: RESULT = new WriteStatement(exprsxleft, exprsxright, exprs); :}
        | RETURN:r Expr:expr
        {: RESULT = new ReturnStatement(rxleft, rxright, expr); :}
        |
        error
        {: :}
;

Vars ::= ID:id COMMA Vars:vs
        {: 
          vs.addFirst(new Id(idxleft, idxright, id));
          RESULT = vs;
        :}
        |
        ID:id
        {:
          RESULT = new LinkedList<Id>();
          RESULT.addFirst(new Id(idxleft, idxright, id));
        :}
;

Exprs ::= Expr:expr COMMA Exprs:exprs
          {:
            exprs.addFirst(expr);
            RESULT = exprs;
          :}
          | 
          Expr:expr
          {: 
            RESULT = new LinkedList<Expr>();
            RESULT.addFirst(expr);
          :}
;

Expr ::= NIL:nilConst
        {: RESULT = new NilConst(nilConstxleft, nilConstxright); :}
        |
        TRUE:t
        {: RESULT = new BooleanConst(txleft, txright, true); :}
        |
        FALSE:f
        {: RESULT = new BooleanConst(fxleft, fxright, false); :}
        |
        INT_CONST:intConst
        {: RESULT = new IntegerConst(intConstxleft, intConstxright, intConst); :}
        |
        FLOAT_CONST:floatConst
        {: RESULT = new FloatConst(floatConstxleft, floatConstxright, floatConst); :}
        |
        STRING_CONST:stringConst
        {: RESULT = new StringConst(stringConstxleft, stringConstxright, stringConst); :}
        |
        BLPAR:b BRPAR COLON TypeDenoter:type
        {: RESULT = new ArrayConst(bxleft, bxright, type); :}
        |
        ID:id
        {: RESULT = new Id(idxleft, idxright, id); :}
        |
        Expr:arrayId SLPAR Expr:arrayPoint SRPAR
        {: RESULT = new ArrayRead(arrayIdxleft, arrayIdxright, arrayId, arrayPoint); :}
        |
        ID:id LPAR Exprs:es RPAR
        {: RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id), es); :}
        |
        ID:id LPAR RPAR
        {: RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id)); :}
        |
        Expr:e1 PLUS Expr:e2
        {: RESULT = new PlusOp(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 MINUS Expr:e2
        {: RESULT = new MinusOp(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 TIMES Expr:e2
        {: RESULT = new TimesOp(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 DIV Expr:e2
        {: RESULT = new DivOp(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 AND Expr:e2
        {: RESULT = new DivOp(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 OR Expr:e2
        {: RESULT = new AndRelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 GT Expr:e2
        {: RESULT = new GreaterThanRelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 GE Expr:e2
        {: RESULT = new GreaterThanERelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 LT Expr:e2
        {: RESULT = new LessThenRelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 LE Expr:e2
        {: RESULT = new LessThenERelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 EQ Expr:e2
        {: RESULT = new EqualsRelop(e1xleft, e1xright, e1, e2); :}
        |
        Expr:e1 NE Expr:e2
        {: RESULT = new NotEqualsRelop(e1xleft, e1xright, e1, e2); :}
        |
        MINUS Expr:e1
        {: RESULT = new UminusExpr(e1xleft, e1xright, e1); :}
        %prec UMINUS
        |
        NOT Expr:e1
        {: RESULT = new NotExpr(e1xleft, e1xright, e1); :}
        |
        SHARP Expr:e1
        {: RESULT = new SharpExpr(e1xleft, e1xright, e1); :}
        |
        error
        {: :}
;